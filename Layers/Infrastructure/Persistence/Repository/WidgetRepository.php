<?php
/**
 * This file is part of the <Cmf> project.
 *
 * @subpackage   Cmf
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since 2012-01-06
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Sfynx\CmfBundle\Layers\Infrastructure\Persistence\Repository;

use Doctrine\ORM\EntityRepository;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Traits\TraitTranslation;

/**
 * Widget Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @subpackage   Cmf
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class WidgetRepository extends EntityRepository
{
    use TraitTranslation;

    // Templating cache values
    const CACHE_YES   = 1;
    const CACHE_NO    = 0;

    // Ajax values
    const AJAX_YES   = 1;
    const AJAX_NO    = 0;

    // Sluggify values
    const SLUGGIFY_YES   = 1;
    const SLUGGIFY_NO    = 0;

    /**
     * Return list of available cache values
     *
     * @return array
     * @access public
     * @static
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2011-12-28
     */
    public static function getAvailableCacheTemplating()
    {
    	return array(
    			self::CACHE_YES  => 'pi.widget.cache.yes',
    			self::CACHE_NO   => 'pi.widget.cache.no'
    	);
    }

    /**
     * Return list of available ajax values
     *
     * @return array
     * @access public
     * @static
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2011-12-28
     */
    public static function getAvailableAjax()
    {
    	return array(
    			self::AJAX_YES  => 'pi.widget.ajax.yes',
    			self::AJAX_NO   => 'pi.widget.ajax.no'
    	);
    }

    /**
     * Return list of available ajax values
     *
     * @return array
     * @access public
     * @static
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2011-12-28
     */
    public static function getAvailableSluggify()
    {
    	return array(
    			self::SLUGGIFY_YES  => 'pi.widget.sluggify.yes',
    			self::SLUGGIFY_NO   => 'pi.widget.sluggify.no'
    	);
    }

    /**
     * Return all widgets which use the options given in parameters.
     *
     * @param string    $plugin
     * @param string    $action
     * @param string    $option
     *
     * @return \Sfynx\CmfBundle\Layers\Domain\Entity\Widget
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-04-05
     */
    public function getWidgetByOptions($plugin, $action, $option)
    {
        $query = $this->createQueryBuilder('p')
        ->select('p')
        ->where('p.enabled = :enabled')
        ->andwhere('p.plugin = :plugin')
        ->andWhere('p.action = :action')
        ->andWhere('p.configXml LIKE :option')
        ->setParameters(array(
                'enabled'    => 1,
                'plugin'    => $plugin,
                'action'    => $action,
                'option'    => "%$option%",
        ));

        return $query;
    }

    /**
     * Return all widget of a block.
     *
     * @return \Sfynx\CmfBundle\Layers\Domain\Entity\Widget
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-01-23
     */
    public function getAllWidgetsByBlock($id_block, $ord = "ASC")
    {
        $query = $this->createQueryBuilder('w')
        ->select('w, b')
        ->leftJoin('w.block', 'b')
        ->where('w.enabled = :enabled')
        ->andWhere('b.id = :blockID')
        ->orderBy('w.position', $ord)
        ->setParameters(array(
                'enabled'    => 1,
                'blockID'    => $id_block,
        ));

        return $query->getQuery();
    }

    /**
     * Find all snippet
     *
     * @param int    $enabled
     * @return object
     * @access    public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getAllSnippet($enabled = 1, $ord = "ASC")
    {
        $query = $this->createQueryBuilder('w')
        ->select('w')
        ->where('w.enabled = :enabled')
        ->Andwhere("w.block is NULL")
        ->orderBy('w.configCssClass', $ord)
        ->setParameters(array(
                'enabled'    => $enabled,
        ))
        ;

        return $query->getQuery()->getResult();
    }

}
