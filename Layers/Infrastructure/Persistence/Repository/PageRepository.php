<?php
/**
 * This file is part of the <Cmf> project.
 *
 * @subpackage Cmf
 * @package    Repository
 * @author     Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since      2011-12-28
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Sfynx\CmfBundle\Layers\Infrastructure\Persistence\Repository;

use Sfynx\CmfBundle\Layers\Domain\Entity\Page;
use Doctrine\ORM\EntityRepository;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Traits\TraitTranslation;

/**
 * Page Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @subpackage Cmf
 * @package    Repository
 * @author     Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class PageRepository extends EntityRepository
{
    use TraitTranslation;

    // Content types
    const TYPE_TEXT_HTML        = 'text/html';
    const TYPE_TEXT_CSS            = 'text/css';
    const TYPE_TEXT_JAVASCRIPT    = 'text/javasript';


    /**
     * Return list of available content types for all type pages.
     *
     * @return array
     * @access public
     * @static
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2011-12-28
     */
    public static function getAvailableContentTypes()
    {
        return array(
            self::TYPE_TEXT_HTML        => self::TYPE_TEXT_HTML,
            self::TYPE_TEXT_CSS           => self::TYPE_TEXT_CSS,
            self::TYPE_TEXT_JAVASCRIPT    => self::TYPE_TEXT_JAVASCRIPT
        );
    }

    /**
     * Return list of available content types for css/js type pages.
     *
     * @return array
     * @access public
     * @static
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2011-12-28
     */
    public static function getAvailableCssJsContentTypes()
    {
        return array(
            self::TYPE_TEXT_CSS           => self::TYPE_TEXT_CSS,
            self::TYPE_TEXT_JAVASCRIPT    => self::TYPE_TEXT_JAVASCRIPT
        );
    }

    /**
     * Return home page
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getHomePage()
    {
        // Retrieve home page (page without parent_id)
        $page = $this->findOneBy(array('route_name' => 'home_page'));

        return $page;
    }

    /**
     * Return a page by url and slug
     *
     * @param string $url  url value of a page
     * @param string $slug slug value of a translation of a page
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getPageByUrlAndSlug($url, $slug)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, t')
            ->leftJoin('p.translations', 't')
            ->leftJoin('p.blocks', 'b')
            ->where('p.enabled = :enabled')
            ->andwhere('p.meta_content_type = :meta')
            ->andWhere('p.url = :urlID')
            ->andWhere('t.slug = :slugID')
            ->setParameters(array(
                'enabled'    => 1,
                'urlID'        => $url,
                'slugID'    => $slug,
                'meta'        => self::TYPE_TEXT_HTML
            ));
        // This ensures that there is a line in return.
        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Return all html type pages.
     *
     * @param integer $user_id user id
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageHtml($user_id = null)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, u')
            ->leftJoin('p.user', 'u')
            ->where('p.meta_content_type = :meta')
            ->setParameters(array(
                'meta'        => self::TYPE_TEXT_HTML
            ))
        ;

        if (!(null === $user_id)) {
            $query->Andwhere('u.id = :userID')
                ->setParameters(array(
                    'meta'        => self::TYPE_TEXT_HTML,
                    'userID'    => $user_id
                ));
        } else {
            $query->setParameters(array(
                'meta'        => self::TYPE_TEXT_HTML,
            ));
        }

        return $query;
    }

    /**
     * Return all Css/js type pages.
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageCssJs()
    {
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.meta_content_type = :meta1')
            ->orwhere('p.meta_content_type = :meta2')
            ->setParameters(array(
                'meta1' => self::TYPE_TEXT_CSS,
                'meta2' => self::TYPE_TEXT_JAVASCRIPT,
            ));

        return $query;
    }

    /**
     * Return all Css type pages.
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageCss()
    {
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.meta_content_type = :meta')
            ->setParameters(array(
                'meta' => self::TYPE_TEXT_CSS,
            ));

        return $query;
    }

    /**
     * Return all Js type pages.
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageJs()
    {
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.meta_content_type = :meta')
            ->setParameters(array(
                'meta'        => self::TYPE_TEXT_JAVASCRIPT,
            ));

        return $query;
    }

    /**
     * Return all pages of a rubrique by id.
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageByRubriqueId($idRubrique)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, r')
            ->leftJoin('p.rubrique', 'r')
            ->where('r.id = :rubriqueID')
            ->setParameters(array(
                'rubriqueID' => $idRubrique,
            ));

        return $query;
    }

    /**
     * Return all pages with a status value
     *
     * @param string  $lang    locale language value
     * @param string  $status  status of the translation page
     * @param integer $user_id user id
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getAllPageByStatus($lang, $status, $user_id = null)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, t, u')
            ->leftJoin('p.translations', 't')
            ->leftJoin('p.user', 'u')
            ->where('p.meta_content_type = :meta')
            ->andWhere('t.status = :status')
            ->andWhere('t.langCode = :langCode');

        if (!(null === $user_id) && !(null === $lang)) {
            $query->Andwhere('u.id = :userID')
                ->setParameters(array(
                    'meta'        => self::TYPE_TEXT_HTML,
                    'status'    => $status,
                    'langCode'    => $lang,
                    'userID'    => $user_id,
                ));
        } else {
            $query->setParameters(array(
                'meta'        => self::TYPE_TEXT_HTML,
                'status'    => $status,
                'langCode'    => $lang,
            ));
        }

        return $query;
    }


    /**
     * Return a page by its id and locale value
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getPageByLocale($id, $locale)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, t')
            ->innerJoin('p.translations', 't')
            ->where('p.id = :pageID')
            ->andWhere('t.langCode = :localeID')
            ->setParameters(array(
                'pageID'    => $id,
                'localeID'    => $locale,
            ));

        return $query;
    }

    /**
     * Return a page by route name value
     *
     * @param string $route_name Route name value
     *
     * @return Page
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-01-23
     */
    public function getPageByRoute($route_name)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p, t, l, b, w')
            ->leftJoin('p.blocks', 'b')
            ->leftjoin('b.widgets', 'w')
            ->leftJoin('p.translations', 't')
            ->leftJoin('t.langCode', 'l')
            ->where('p.route_name = :routeNameID')
            ->setParameters(array(
                'routeNameID' => $route_name,
            ))->getQuery();
        $query = $this->cacheQuery($query, 84600);
        try {
            return $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
