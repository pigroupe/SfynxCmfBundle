<?php
/**
 * This file is part of the <Cmf> project.
 *
 * @subpackage   Cmf
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since 2011-12-28
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Sfynx\CmfBundle\Layers\Infrastructure\Persistence\Repository;

use Doctrine\ORM\EntityRepository;
use Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\Traits\TraitTranslation;

/**
 * Comment Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @subpackage   Cmf
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class CommentRepository extends EntityRepository
{
    use TraitTranslation;

    /**
     * Return all Comment of a translation Page.
     *
     * @return array\Sfynx\CmfBundle\Layers\Domain\Entity\Comment
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-01-23
     */
    public function getCommentsByPage($pageTransID, $approved = true)
    {
        $qb = $this->createQueryBuilder('c')
        ->select('c')
        ->where('c.pageTranslation = :pageTrans')
        ->addOrderBy('c.created_at')
        ->setParameter('pageTrans', $pageTransID);

        if (false === (null === $approved))
            $qb->andWhere('c.approved = :approved')
            ->setParameter('approved', $approved);

        return $qb->getQuery()
        ->getResult();
    }

    /**
     * Return latest comments.
     *
     * @return array\Sfynx\CmfBundle\Layers\Domain\Entity\Comment
     * @access public
     *
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since 2012-01-23
     */
    public function getLatestComments($limit = 10)
    {
        $qb = $this->createQueryBuilder('c')
        ->select('c')
        ->addOrderBy('c.id', 'DESC');

        if (false === (null === $limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
        ->getResult();
    }
}
